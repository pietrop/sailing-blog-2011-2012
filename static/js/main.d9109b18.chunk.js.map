{"version":3,"sources":["Polaroid.js","App.js","serviceWorker.js","index.js"],"names":["Polaroid","props","class","children","caption","makeSpeechBubbles","html","result","split","filter","el","map","p","join","App","useState","posts","currentData","setCurrentData","id","setCurrentId","clipboard","ClipboardJS","on","Container","className","style","textAlign","color","Row","Col","xs","span","order","sm","md","lg","xl","post","index","onChange","isVisible","console","log","minHeight","borderBottom","marginBottom","marginTop","date","data-clipboard-text","window","location","origin","cursor","type","dangerouslySetInnerHTML","__html","photoset","width","height","key","src","Carousel","photo","Item","replace","textDecoration","href","target","rel","cite","conversation","line","label","margin","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d9109b18.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './polaroid.css';\n\nfunction Polaroid(props) {\n  return (\n    <div class=\"wrapper\">\n      <div class=\"item\">\n        <div class=\"polaroid\">\n          {props.children}\n          <div class=\"caption\">{props.caption}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Polaroid;\n","import React, { useState } from 'react';\nimport VizSensor from 'react-visibility-sensor';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Carousel from 'react-bootstrap/Carousel';\nimport posts from './data.json';\nimport Polaroid from './Polaroid.js';\nimport './blockquote.css';\nimport './message-bubble.css';\nimport './App.css';\nimport 'bootstrap-css-only';\nimport ClipboardJS from 'clipboard';\n\nconst makeSpeechBubbles = (html) => {\n  if (!html) {\n    return html;\n  }\n  const result = html\n    .split('</p>')\n    .filter((el) => {\n      return el;\n    })\n    .map((p) => {\n      return `<section class=\"message\\ last\">${p}</p></section>`;\n    })\n    .join(' ');\n\n  return `<section class=\"yours\\ messages\">${result}</section>`;\n};\n\nfunction App() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [currentData, setCurrentData] = useState(posts[0]);\n  const [currentId, setCurrentId] = useState(posts[0].id);\n\n  const clipboard = new ClipboardJS('.clipboardBtn');\n\n  clipboard.on('success', function () {\n    // document.body.insertAdjacentHTML('beforeend', '<div>that worked.</div>');\n  });\n  clipboard.on('error', function () {\n    // document.body.insertAdjacentHTML('beforeend', \"<div>that didn't work.</div>\");\n  });\n\n  return (\n    <>\n      <Container className=\"main-container\">\n        <br />\n        <h1 style={{ textAlign: 'center' }}>\n          Sailing blog ‚õµ üé¨ <small style={{ color: 'grey' }}>2011 - 2012</small>\n        </h1>\n        <p style={{ textAlign: 'center' }}>\n          In 2011 I decided to take a few months off to learn to sail, this is a blog of that experience. <br />\n          Everything was done on my üì±\n          <br /> Initially I had used tumblr, but recently I exported the data, and gave it a new home, to play around with a new story format.\n        </p>\n        {/* <h2 style={{ textAlign: 'center', color: 'grey' }}>\n        <small>2011 - 2012</small>\n      </h2> */}\n        {/* TODO: could add some filters */}\n        {/* <h2 style={{ textAlign: 'center' }}>üì∑üìπüéßüìú üìÑ</h2> */}\n        {/* <h2 style={{ textAlign: 'center' }}>\n        {' '}\n        {\n          new Set(\n            posts.map((post) => {\n              return post.type + ' ';\n            })\n          )\n        }\n      </h2> */}\n\n        <Row>\n          <Col xs={{ span: 12, order: 2 }} sm={{ span: 6, order: 1 }} md={6} lg={6} xl={6}>\n            <section className={'posts-column'}>\n              {posts.map((post, index) => (\n                <VizSensor\n                  onChange={(isVisible) => {\n                    console.log('isVisible', isVisible);\n                    if (isVisible) {\n                      setCurrentId(post.id);\n                      setCurrentData(post);\n                    }\n                  }}\n                >\n                  <div\n                    id={'id_' + post.id}\n                    style={{ minHeight: '60vh', borderBottom: '0.05em solid lightgrey', marginBottom: '1em', marginTop: '1em' }}\n                  >\n                    {post['type'] === 'Photo' && <span>üì∑</span>}\n                    {post['type'] === 'Video' && <span>üìπ</span>}\n                    {post['type'] === 'Audio' && <span>üéß</span>}\n                    {post['type'] === 'Quote' && <span>üìú</span>}\n                    {post['type'] === 'Conversation' && <span>üó£Ô∏è</span>} {/* üé§ */}\n                    {post['type'] === 'Link' && <span>üîó</span>}\n                    {post['type'] === 'Regular' && <span>üìÑ</span>}\n                    <small>{post.date + '  '}</small>\n                    <span class=\"clipboardBtn\" data-clipboard-text={`${window.location.origin}#id_${post.id}`} style={{ cursor: 'pointer' }}>\n                      üìã\n                    </span>\n                    {/* <a href={`#${post.id}`}>HTML link code generator</a> */}\n                    {post.type === 'Photo' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['photo-caption']) }}></div>}\n                    {post.type === 'Video' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['video-caption']) }}></div>}\n                    {post.type === 'Audio' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['audio-caption']) }}></div>}\n                    {post.type === 'Quote' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['quote-source']) }}></div>}\n                    {post.type === 'Link' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['link-description']) }}></div>}\n                    {post.type === 'Conversation' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['conversation-title']) }}></div>}\n                    {post.type === 'Regular' && <div dangerouslySetInnerHTML={{ __html: makeSpeechBubbles(post['regular-title']) }}></div>}\n                    {/* TODO */}\n                  </div>\n                </VizSensor>\n              ))}\n            </section>\n          </Col>\n\n          <Col xs={{ span: 12, order: 1 }} sm={{ span: 6, order: 2 }} md={6} lg={6} xl={6}>\n            <section\n              className={['polaroid-column'].join(' ')}\n              // style={{\n              //   position: '-webkit-sticky',\n              //   position: 'sticky',\n              //   top: 0,\n              // }}\n            >\n              {/* {JSON.stringify(currentData)} */}\n              {/* <p>{data['photo-caption']}</p> */}\n              {/* <div dangerouslySetInnerHTML={{ __html: data['photo-caption'] }}></div> */}\n\n              {currentData.type === 'Photo' && !currentData.photoset ? (\n                <Polaroid caption={currentData.date}>\n                  <img style={{ width: '100%', height: 'auto' }} key={currentData['photo-url'][2]['$t']} src={currentData['photo-url'][0]['$t']} />\n                </Polaroid>\n              ) : null}\n\n              {currentData.type === 'Photo' && currentData.photoset ? (\n                <Polaroid caption={currentData.date}>\n                  <Carousel>\n                    {currentData.photoset.photo.map((photo) => {\n                      return (\n                        <Carousel.Item>\n                          <img\n                            // style={{ width: '100%', height: 'auto' }}\n                            className=\"d-block w-100\"\n                            src={photo['photo-url'][1]['$t']}\n                            // alt=\"First slide\"\n                          />\n                          {/* <Carousel.Caption> */}\n                          {/* <h3>First slide label</h3> */}\n                          {/* <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p> */}\n                          {/* </Carousel.Caption> */}\n                        </Carousel.Item>\n                      );\n                    })}\n                  </Carousel>\n                  ``\n                </Polaroid>\n              ) : null}\n\n              {currentData.type === 'Video' && (\n                <>\n                  <Polaroid caption={currentData.date}>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: currentData['video-player'][0]\n                          .replace(/<video/, '<video controls style=\"background-color:black;\"')\n                          .replace(/width='400'/, 'width=\"100%\"')\n                          .replace(/height='225'/, \"height='auto'\")\n                          .replace(/muted/, ''),\n                      }}\n                    ></div>\n                  </Polaroid>\n                </>\n              )}\n\n              {currentData.type === 'Audio' && (\n                <Polaroid caption={currentData.date}>\n                  {/* Change to use audio element */}\n                  {/* <audio controls src={currentData['audio-player'].split('src=\"')[1].split('.mp3\"')[0] + '.mp3'} /> */}\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: currentData['audio-player'].replace(/width=\\\"540\\\"/, 'width=\"%100\"'),\n                    }}\n                  ></div>\n                </Polaroid>\n              )}\n\n              {currentData.type === 'Link' && (\n                <Polaroid caption={currentData.date}>\n                  üîó{' '}\n                  <a style={{ textDecoration: 'none' }} href={currentData['link-url']} target=\"_blank\" rel=\"noopener\" rel=\"noreferrer\">\n                    {currentData['link-text']}\n                  </a>\n                </Polaroid>\n              )}\n\n              {currentData.type === 'Quote' && (\n                <Polaroid caption={currentData.date}>\n                  <blockquote cite=\"https://www.huxley.net/bnw/four.html\">\n                    <p>\n                      {currentData['quote-text']\n                        .replace(/&ldquo;/g, '\"')\n                        .replace(/&rsquo;/g, \"'\")\n                        .replace(/&rdquo;/g, '\"')\n                        .replace(/&hellip;/g, '...')}\n                    </p>\n                    {/* <footer>\n                    {currentData['quote-source']\n                      .replace(/&ldquo;/g, '\"')\n                      .replace(/&rdquo;/g, '\"')\n                      .replace(/&hellip;/g, '...')}\n                  </footer> */}\n                  </blockquote>\n                </Polaroid>\n              )}\n\n              {currentData.type === 'Conversation' && (\n                <Polaroid caption={currentData.date}>\n                  {/* {currentData['conversation-text']} */}\n\n                  {currentData.conversation.line.map((line) => {\n                    return (\n                      <p>\n                        <strong>{line.label}</strong> {line['$t']}\n                      </p>\n                    );\n                  })}\n                </Polaroid>\n              )}\n\n              {currentData.type === 'Regular' && (\n                <Polaroid caption={currentData.date}>\n                  <div\n                    style={{ textAlign: 'left', margin: '1.5em' }}\n                    dangerouslySetInnerHTML={{\n                      __html: currentData['regular-body'],\n                    }}\n                  ></div>\n                </Polaroid>\n              )}\n            </section>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}